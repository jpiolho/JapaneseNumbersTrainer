@if(HasOptions)
{
    <div class="btn-group" @attributes=Attributes>
        <button type="button" class="btn @StyleToCssClass()" disabled="@Disabled" @onclick="Click">@Text</button>
        <button type="button" class="btn @StyleToCssClass()" disabled="@Disabled" @onclick="OptionsClick" style="flex:0">
            <BootstrapIcon Icon="gear-fill" />
        </button>
    </div>
}
else
{
    <button type="button" class="btn @StyleToCssClass()" disabled="@Disabled" @onclick="Click" @attributes=Attributes>@Text</button>
}

@code {
    public enum Style
    {
        Primary,
        Secondary
    }

    [Parameter] public string? Text { get; set; }
    [Parameter] public bool HasOptions { get; set; }
    [Parameter] public EventCallback OptionsClick { get; set; }
    [Parameter] public EventCallback Click { get; set; }
    [Parameter] public Style ButtonStyle { get; set; } = MenuButton.Style.Primary;
    [Parameter] public bool Disabled { get; set; }
    [Parameter(CaptureUnmatchedValues = true)] public Dictionary<string, object>? Attributes { get; set; }

    private string StyleToCssClass() => ButtonStyle switch
    {
        Style.Primary => "btn-primary",
        Style.Secondary => "btn-secondary",
        _ => throw new Exception($"Unsupported button style: {ButtonStyle}")
    };
}