@page "/dates/weekdays"
@inject NavigationService NavigationService
@inject JapaneseDateService JapaneseService
@inject OptionsService OptionsService
@layout EmptyLayout

@if (Weekday is null)
    return;

<RevealGame Prompt="@(Weekday?.ToString())"
            Answer="@Romaji"
            @bind-Reveal="@_showRomaji"
            Next="NavigateToRandomWeekday"
            Exit="NavigateToMenu" />

@code {
    private const string QueryParameterWeekDay = "weekday";
    [Parameter, SupplyParameterFromQuery(Name = QueryParameterWeekDay)] public string? DayOfWeekAsString { get; set; }

    private DayOfWeek? Weekday => DayOfWeekAsString is not null ? Enum.Parse<DayOfWeek>(DayOfWeekAsString, true) : null;
    private string? Romaji => Weekday.HasValue ? JapaneseService.WeekdayToRomaji(Weekday.Value) : null;

    private bool _showRomaji;

    protected override Task OnInitializedAsync()
    {
        if (Weekday is null)
            NavigateToRandomWeekday();

        return Task.CompletedTask;
    }

    private void NavigateToRandomWeekday()
    {
        _showRomaji = false;

        var weekday = Utils.GetNewRandomFromArrayNullable(Enum.GetValues<DayOfWeek>(), Weekday);

        NavigationService.ChangeQueryString($"{QueryParameterWeekDay}={weekday}");
    }

    private void NavigateToMenu()
    {
        NavigationService.GoToDatesMenu();
    }
}